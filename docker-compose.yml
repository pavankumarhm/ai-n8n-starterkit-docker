volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  webui_storage:
  qdrant_storage:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  env_file:
    - .env

# x-ollama: &service-ollama
#   image: ollama/ollama:latest
#   ports:
#     - "11434:11434"
#   volumes:
#     - ollama_storage:/root/.ollama
#   container_name: ollama
#   pull_policy: always
#   tty: true
#   restart: always
#   environment:
#     - OLLAMA_KEEP_ALIVE=24h
#     - OLLAMA_HOST=0.0.0.0

# x-init-ollama: &init-ollama
#   image: ollama/ollama:latest
#   container_name: ollama-pull-llama
#   volumes:
#     - ollama_storage:/root/.ollama
#   entrypoint: /bin/sh
#   environment:
#     - OLLAMA_HOST=ollama:11434
#   command:
#     - "-c"
#     - "sleep 3; ollama pull llama3.2:3b"

services:
#   # allows displaying the container status in homepage
#   dockerproxy:
#     image: ghcr.io/tecnativa/docker-socket-proxy:latest
#     container_name: dockerproxy
#     environment:
#       - CONTAINERS=1 # Allow access to viewing containers
#       - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
#       - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
#       - POST=0 # Disallow any POST operations (effectively read-only)
#     ports:
#       - "127.0.0.1:2375:2375"
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
#     restart: unless-stopped

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    env_file:
      - .env
    environment:
      # HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts
      PUID: 1000 # optional, your user id
      PGID: 1000 # optional, your group id
    ports:
      - "3000:3000"
    volumes:
      - ./config:/app/config
      #- /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    #    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./n8n/shared:/data/shared
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

    healthcheck:
      test: [ "CMD-SHELL", "wget -qS --proxy=off --tries=1 --timeout=3 -O /dev/null http://127.0.0.1:5678/healthz 2>&1 | grep -q 'HTTP/1.1 200 OK'" ]
      interval: 20s
      timeout: 5s
      retries: 3
    labels:
      - homepage.group=Tools
      - homepage.name=n8n
      - homepage.icon=n8n.png
      - homepage.href=http://localhost:5678/
      - homepage.description=build workflows, connect everything
#      - homepage.widget.type=customapi
#      - homepage.widget.url=http://host.docker.internal:5678/webhook/homepage-widget
#      - homepage.widget.refreshInterval=120000
#      - homepage.widget.method=GET
#      - homepage.widget.mappings[0].label=workflows
#      - homepage.widget.mappings[0].field=0.sum_count_workflows
#      - homepage.widget.mappings[0].format=number
#      - homepage.weight=2
  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  open-webui:
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui
    volumes:
      - webui_storage:/app/backend/data
    #    depends_on:
    #      - ollama
    ports:
      - "8080:8080"
    environment: # https://docs.openwebui.com/getting-started/env-configuration#default_models
      - OLLAMA_BASE_URLS=http://host.docker.internal:11434 #comma separated ollama hosts
      - ENV=dev
      - WEBUI_AUTH=False
      #      - WEBUI_NAME=Kickstart AI
      - WEBUI_URL=http://localhost:8080
      - WEBUI_SECRET_KEY=t0p-s3cr3t
      - ENABLE_WEB_SEARCH=true
      - WEB_SEARCH_ENGINE=google
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    labels:
      - homepage.group=Tools
      - homepage.name=Open WebUI
      - homepage.icon=open-webui.png
      - homepage.href=http://localhost:8080/
      - homepage.description=Web UI for LLMs
      - homepage.weight=1

  # use local llama instead on MacOS, container does not have GPU support for Metal
  # ollama-cpu:
  #   profiles: [ "cpu" ]
  #   <<: *service-ollama

  # ollama-gpu:
  #   profiles: [ "gpu-nvidia" ]
  #   <<: *service-ollama
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [ gpu ]

  # ollama-gpu-amd:
  #   profiles: [ "gpu-amd" ]
  #   <<: *service-ollama
  #   image: ollama/ollama:rocm
  #   devices:
  #     - "/dev/kfd"
  #     - "/dev/dri"

  # ollama-pull-llama-cpu:
  #   profiles: [ "cpu" ]
  #   <<: *init-ollama
  #   depends_on:
  #     - ollama-cpu

  # ollama-pull-llama-gpu:
  #   profiles: [ "gpu-nvidia" ]
  #   <<: *init-ollama
  #   depends_on:
  #     - ollama-gpu

  # ollama-pull-llama-gpu-amd:
  #   profiles: [ gpu-amd ]
  #   <<: *init-ollama
  #   image: ollama/ollama:rocm
  #   depends_on:
  #     - ollama-gpu-amd
